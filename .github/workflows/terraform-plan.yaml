name: Terraform Plan

on:
  workflow_call:
    inputs:
      ubuntu_runner:
        required: false
        type: boolean
        default: false
      repository_name:
        required: true
        type: string
      runner_name:
        required: true
        type: string
      runner_category:
        required: true
        type: string
      branch_name:
        required: true
        type: string
      aws_account_number:
        required: false
        type: string
      aws_region:
        required: false
        type: string
        default: 'us-east-1'
      terraform_state_file:
        required: false
        type: string
        default: 'terraform.tfstate'
      terraform_directory:
        required: false
        type: string
      values_file:
        required: true
        type: string
jobs:
  terraform-init:
    name: init
    if: ${{ inputs.ubuntu_runner == false }}
    runs-on: ['${{ inputs.runner_name }}', '${{inputs.branch_name}}', '${{inputs.runner_category}}', "self-hosted", "linux", "x64", "amazon"]
    steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Checkout code
      uses: actions/checkout@v4

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ inputs.aws_account_number }}:role/${{ secrets.AWS_ROLE_NAME }}
        role-session-name: ${{ secrets.AWS_ROLE_NAME }}
        aws-region: ${{ inputs.aws_region }}

    - name: Prepare Terraform plugin cache dir
      working-directory: ${{ inputs.terraform_directory }}
      run: mkdir -p ~/.terraform.d/plugin-cache

    - name: Cache Terraform providers & modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          terraform/.terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('terraform/terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Terraform Init
      working-directory: ${{ inputs.terraform_directory }}
      run: |
        terraform init -backend-config=bucket=${{ vars.TERRAFORM_BUCKET }} -backend-config=key=${{ github.event.repository.name }}/${{ inputs.terraform_state_file }} -backend-config=region=us-east-1


  terraform-init-ubuntu:
    name: init ubuntu
    if: ${{ inputs.ubuntu_runner == true }}
    runs-on: ubuntu-latest
    steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Checkout code
      uses: actions/checkout@v4

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ inputs.aws_account_number }}:role/${{ secrets.AWS_ROLE_NAME }}
        role-session-name: ${{ secrets.AWS_ROLE_NAME }}
        aws-region: ${{ inputs.aws_region }}

    - name: Prepare Terraform plugin cache dir
      run: mkdir -p ~/.terraform.d/plugin-cache

    - name: Cache Terraform providers & modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          terraform/.terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('terraform/terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Terraform Init
      working-directory: ${{ inputs.terraform_directory }}
      run: |
        terraform init -backend-config=bucket=${{ vars.TERRAFORM_BUCKET }} -backend-config=key=${{ github.event.repository.name }}/${{ inputs.terraform_state_file }} -backend-config=region=us-east-1


  terraform-plan:
    name: plan
    needs: [ terraform-init ]
    if: ${{ inputs.ubuntu_runner == false }}
    environment: ${{ github.ref_name }}
    runs-on: ['${{ inputs.runner_name }}', '${{inputs.branch_name}}', '${{inputs.runner_category}}', "self-hosted", "linux", "x64", "amazon"]
    steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Checkout code
      uses: actions/checkout@v4

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_NUMBER_ENV }}:role/${{ secrets.AWS_ROLE_NAME }}
        role-session-name: ${{ secrets.AWS_ROLE_NAME }}
        aws-region: ${{ inputs.aws_region }}

    - name: Prepare Terraform plugin cache dir
      run: mkdir -p ~/.terraform.d/plugin-cache

    - name: Cache Terraform providers & modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          terraform/.terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('terraform/terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Check Has Changes
      id: terraform_plan_has_changes
      working-directory: ${{ inputs.terraform_directory }}
      shell: bash
      run: |
        terraform plan -no-color -var-file=${{ inputs.values_file }} -detailed-exitcode > result || echo "has_changes=$?" >> $GITHUB_OUTPUT

    - name: Do something with Terraform plan output
      if: ${{ steps.terraform_plan_has_changes.outputs.has_changes }} > 0
      working-directory: ${{ inputs.terraform_directory }}
      shell: bash
      run: |
        terraform plan -var-file=${{ inputs.values_file }} -no-color | tee changes.txt

    - name: Upload artifact
      if: ${{ steps.terraform_plan_has_changes.outputs.has_changes }} > 0
      uses: actions/upload-artifact@v4
      with:
        name: changes.txt
        path: changes.txt
        retention-days: 1


  terraform-plan-ubuntu:
    name: plan ubuntu
    needs: [ terraform-init-ubuntu ]
    if: ${{ inputs.ubuntu_runner == true }}
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Checkout code
      uses: actions/checkout@v4

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_NUMBER_ENV }}:role/${{ secrets.AWS_ROLE_NAME }}
        role-session-name: ${{ secrets.AWS_ROLE_NAME }}
        aws-region: ${{ inputs.aws_region }}

    - name: Prepare Terraform plugin cache dir
      run: mkdir -p ~/.terraform.d/plugin-cache

    - name: Cache Terraform providers & modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          terraform/.terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('terraform/terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Check Has Changes
      id: terraform_plan_has_changes
      shell: bash
      working-directory: ${{ inputs.terraform_directory }}
      run: |
        terraform plan -no-color -var-file=${{ inputs.values_file }} -detailed-exitcode > result || echo "has_changes=$?" >> $GITHUB_OUTPUT

    - name: Do something with Terraform plan output
      if: ${{ steps.terraform_plan_has_changes.outputs.has_changes }} > 0
      shell: bash
      working-directory: ${{ inputs.terraform_directory }}
      run: |
        terraform plan -no-color -var-file=${{ inputs.values_file }} | tee changes.txt

    - name: Upload artifact
      if: ${{ steps.terraform_plan_has_changes.outputs.has_changes }} > 0
      uses: actions/upload-artifact@v4
      with:
        name: changes.txt
        path: changes.txt
        retention-days: 1










#  test:
#    name: Test
#    runs-on: 'ubuntu-latest'
#    steps:
#
#    - name: Discord Webhook Action
#      uses: tsickert/discord-webhook@v7.0.0
#      with:
#        webhook-url: ${{ secrets.DISCORD_WEBHOOK_NOTIFIER }}
#        content: "Test"
#
#
#
#    - name: Send Discord Webhook
#      env:
#        REPOSITORY: '${{ github.event.repository.name }}'
#        BRANCH:     '${{ github.ref_name }}'
#        COMMIT:     '${{ github.sha }}'
#      run: |
#        cat <<EOF > discord_payload.json
#        {
#          "content": "Execution Error in Terraform",
#          "embeds": [
#            {
#              "color": 16711680,
#              "fields": [
#                { "name": "Repository", "value": "${REPOSITORY}", "inline": true },
#                { "name": "Branch",     "value": "${BRANCH}",     "inline": true },
#                { "name": "Github",     "value": "https://github.com/${REPOSITORY}/tree/${BRANCH}/terraform" },
#                { "name": "Commit",     "value": "${COMMIT}" }
#              ]
#            }
#          ],
#          "image": {
#            "url": "https://i.imgur.com/AfFp7pu.png"
#          },
#          "footer": {
#            "text": "Some footer text here",
#            "icon_url": "https://i.imgur.com/AfFp7pu.png"
#          },
#          "components": [
#            {
#              "type": 1,
#              "components": [
#                {
#                  "type": 2,
#                  "style": 1,
#                  "label": "Check Changes",
#                  "custom_id": "terraform_check_changes",
#                  "emoji": { "name": "ðŸ“¦" }
#                }
#              ]
#            },
#            {
#              "type": 1,
#              "components": [
#                {
#                  "type": 2,
#                  "style": 2,
#                  "label": "Check Changes",
#                  "custom_id": "terraform_check_changes_2",
#                  "emoji": { "name": "ðŸ“¦" }
#                }
#              ]
#            }
#          ]
#        }
#
#        EOF
#    - name: Send to Discord via Webhook Action
#      uses: tsickert/discord-webhook@v7.0.0
#      with:
#        webhook-url: ${{ secrets.DISCORD_WEBHOOK_NOTIFIER }}
#        raw-data: discord_payload.json
